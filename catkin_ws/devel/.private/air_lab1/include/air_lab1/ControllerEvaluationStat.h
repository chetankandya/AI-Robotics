// Generated by gencpp from file air_lab1/ControllerEvaluationStat.msg
// DO NOT EDIT!


#ifndef AIR_LAB1_MESSAGE_CONTROLLEREVALUATIONSTAT_H
#define AIR_LAB1_MESSAGE_CONTROLLEREVALUATIONSTAT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace air_lab1
{
template <class ContainerAllocator>
struct ControllerEvaluationStat_
{
  typedef ControllerEvaluationStat_<ContainerAllocator> Type;

  ControllerEvaluationStat_()
    : samples(0)
    , last_error(0.0)
    , average_error(0.0)  {
    }
  ControllerEvaluationStat_(const ContainerAllocator& _alloc)
    : samples(0)
    , last_error(0.0)
    , average_error(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _samples_type;
  _samples_type samples;

   typedef double _last_error_type;
  _last_error_type last_error;

   typedef double _average_error_type;
  _average_error_type average_error;





  typedef boost::shared_ptr< ::air_lab1::ControllerEvaluationStat_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::air_lab1::ControllerEvaluationStat_<ContainerAllocator> const> ConstPtr;

}; // struct ControllerEvaluationStat_

typedef ::air_lab1::ControllerEvaluationStat_<std::allocator<void> > ControllerEvaluationStat;

typedef boost::shared_ptr< ::air_lab1::ControllerEvaluationStat > ControllerEvaluationStatPtr;
typedef boost::shared_ptr< ::air_lab1::ControllerEvaluationStat const> ControllerEvaluationStatConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::air_lab1::ControllerEvaluationStat_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::air_lab1::ControllerEvaluationStat_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::air_lab1::ControllerEvaluationStat_<ContainerAllocator1> & lhs, const ::air_lab1::ControllerEvaluationStat_<ContainerAllocator2> & rhs)
{
  return lhs.samples == rhs.samples &&
    lhs.last_error == rhs.last_error &&
    lhs.average_error == rhs.average_error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::air_lab1::ControllerEvaluationStat_<ContainerAllocator1> & lhs, const ::air_lab1::ControllerEvaluationStat_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace air_lab1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::air_lab1::ControllerEvaluationStat_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::air_lab1::ControllerEvaluationStat_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::air_lab1::ControllerEvaluationStat_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::air_lab1::ControllerEvaluationStat_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::air_lab1::ControllerEvaluationStat_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::air_lab1::ControllerEvaluationStat_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::air_lab1::ControllerEvaluationStat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "46c88f67df59b89f4eac2f8df597d291";
  }

  static const char* value(const ::air_lab1::ControllerEvaluationStat_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x46c88f67df59b89fULL;
  static const uint64_t static_value2 = 0x4eac2f8df597d291ULL;
};

template<class ContainerAllocator>
struct DataType< ::air_lab1::ControllerEvaluationStat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "air_lab1/ControllerEvaluationStat";
  }

  static const char* value(const ::air_lab1::ControllerEvaluationStat_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::air_lab1::ControllerEvaluationStat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 samples           # Number of samples used for computing the error\n"
"float64 last_error      # Last error\n"
"float64 average_error   # Average error\n"
;
  }

  static const char* value(const ::air_lab1::ControllerEvaluationStat_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::air_lab1::ControllerEvaluationStat_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.samples);
      stream.next(m.last_error);
      stream.next(m.average_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControllerEvaluationStat_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::air_lab1::ControllerEvaluationStat_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::air_lab1::ControllerEvaluationStat_<ContainerAllocator>& v)
  {
    s << indent << "samples: ";
    Printer<int32_t>::stream(s, indent + "  ", v.samples);
    s << indent << "last_error: ";
    Printer<double>::stream(s, indent + "  ", v.last_error);
    s << indent << "average_error: ";
    Printer<double>::stream(s, indent + "  ", v.average_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AIR_LAB1_MESSAGE_CONTROLLEREVALUATIONSTAT_H
